{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReorderedGoods","goods","sortType","isReversed","visibleGoods","sort","good1","good2","ALPABET","localeCompare","LENGTH","length","reverse","App","useState","setReverse","NONE","setSortType","className","type","classNames","onClick","state","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAcK,SAASC,EACdC,EADK,GAGJ,IADCC,EACF,EADEA,SAAUC,EACZ,EADYA,WAENC,EAAY,YAAOH,GAmBzB,OAjBAG,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQL,GACN,KAAKJ,EAASU,QACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKT,EAASY,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAITR,GACFC,EAAaQ,UAGRR,G,SAlCJN,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAqCE,IAAMe,EAAgB,WAC3B,MAAiCC,oBAAS,GAA1C,mBAAOX,EAAP,KAAmBY,EAAnB,KACA,EAAgCD,mBAAShB,EAASkB,MAAlD,mBAAOd,EAAP,KAAiBe,EAAjB,KAmBA,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IACE,iBACA,CAAE,WAAYlB,IAAaJ,EAASU,UAGxCa,QAxBe,WACrBJ,GAAY,kBAAMnB,EAASU,YAevB,iCAaA,wBACEW,KAAK,SACLD,UACEE,IACE,oBACA,CAAE,WAAYlB,IAAaJ,EAASY,SAGxCW,QAjCiB,WACvBJ,GAAY,kBAAMnB,EAASY,WAwBvB,4BAaA,wBACES,KAAK,SACLD,UACEE,IACE,oBACA,CAAE,YAAajB,IAGnBkB,QAtDc,WACpBN,GAAW,SAAAO,GAAK,OAAKA,MA6CjB,sBAaEpB,IAAaJ,EAASkB,MAAQb,IAE5B,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QApDQ,WAClBJ,GAAY,kBAAMnB,EAASkB,QAC3BD,GAAW,kBAAM,MA+CT,sBAUN,6BACE,6BACGf,EAAkBD,EAAiB,CAAEG,WAAUC,eAC7CoB,KAAI,SAACC,GAAD,OACH,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,cCnIvBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.194ab502.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case SortType.ALPABET:\n        return good1.localeCompare(good2);\n\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReverse] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const handleReverse = () => {\n    setReverse(state => !state);\n  };\n\n  const handleAlphSort = () => {\n    setSortType(() => SortType.ALPABET);\n  };\n\n  const handleLengthSort = () => {\n    setSortType(() => SortType.LENGTH);\n  };\n\n  const handleReset = () => {\n    setSortType(() => SortType.NONE);\n    setReverse(() => false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            classNames(\n              'button is-info',\n              { 'is-light': sortType !== SortType.ALPABET },\n            )\n          }\n          onClick={handleAlphSort}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            classNames(\n              'button is-success',\n              { 'is-light': sortType !== SortType.LENGTH },\n            )\n          }\n          onClick={handleLengthSort}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            classNames(\n              'button is-warning',\n              { 'is-light': !isReversed },\n            )\n          }\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={handleReset}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        <ul>\n          {getReorderedGoods(goodsFromServer, { sortType, isReversed })\n            .map((good) => (\n              <li key={good} data-cy=\"Good\">{good}</li>\n            ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}